@startuml

title __DUNGEON's Class Diagram__\n

  package model.dungeon {
    class Difficulty {
        - mobSpawnRate : int
        - mobLevelRate : float
        - mobTier : float
        - mobAI : float
        # Difficulty()
        + getMobSpawnRate()
        + getMobLevelRate()
        + getMobTier()
        + getMobAI()
    }
  }
  

  package model.dungeon {
    class DifficultyFactory {
        {static} + difficultyFactory : DifficultyFactory
        - gson : Gson
        {static} + getDifficultyFactory()
        + DifficultyFactory()
        + getDifficulty()
        + getEasyDifficulty()
        + getMiddleDifficulty()
        + getHardDifficulty()
        + getRandomDifficulty()
    }
  }
  

  package model.dungeon {
    class Dungeon {
        - layout : Tile[][]
        - tileSize : int
        # Dungeon()
        # Dungeon()
        + getLayout()
        + getObjective()
        + getTile()
        + getTile()
        + getSquare()
        + getTileSize()
        + setTileSize()
    }
  }
  

  package model.dungeon {
    class DungeonException {
        + DungeonException()
    }
  }
  

  package model.dungeon {
    class DungeonFactory {
        - gson : Gson
        - random : Random
        - numberOfLayoutEntrances : int
        + DungeonFactory()
        + DungeonFactory()
        - init()
        - init()
        + getDungeonFromTemplate()
        + generateRandomDungeon()
        + generateRandomDungeon()
        + generateRandomDungeon()
        + generateRandomDungeon()
        + getMobLayout()
        - setStartPoint()
        - generateDungeonFromLayout()
        - generateLayout()
        - setMobsInTile()
    }
  }
  

  package model.dungeon {
    enum Landscape {
      FOREST
      DESERT
      SPACE
      possibleTerrains
      borders
    }
  }
  

  package model.dungeon {
    interface Objective {
        {abstract} + getWinCondition()
        {abstract} + isFullfilled()
    }
  }
  

  package model.dungeon {
    class Position {
        - x : int
        - y : int
        - xTile : int
        - yTile : int
        + Position()
        + Position()
        + Position()
        + Position()
        + equals()
        + getxSquare()
        + setxSquare()
        + getySquare()
        + setySquare()
        + getxTile()
        + setxTile()
        + getyTile()
        + setyTile()
        + changeBy()
        + toString()
    }
  }
  

  package model.dungeon {
    class Square {
        + Square()
        + getTerrain()
        + getEffect()
        + setEffect()
    }
  }
  

  package model.dungeon {
    enum Terrain {
      START_POINT
      NONE
      TREE
      BEDROCK
      BUSH
      BOULDER
      WHITE_HOLE
      COMET
      effortToPass
      effect
    }
  }
  

  package model.dungeon {
    enum TerrainObject {
      TREE
      BOULDER
      BEDROCK
      effort
      effect
    }
  }
  

  package model.dungeon {
    class Tile {
        - layout : Square[][]
        - size : int
        + Tile()
        + Tile()
        - checkLayout()
        + getLayout()
        + getSize()
        + getLandscape()
        + get()
    }
  }
  

  package model.dungeon {
    class TileFactory {
        - TileFactory()
    }
  }
  

  Dungeon o-- Objective : objective
  Square o-- Terrain : terrain
  Square o-- Effect : effect
  Terrain o-- Effect : effect
  TerrainObject o-- Effect : effect
  Tile o-- Landscape : landscape


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
